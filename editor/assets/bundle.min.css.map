{"version":3,"file":"assets/bundle.min.css","mappings":";;;;AA4CA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;IAClB,QAAQ;AACZ;AAEA;IACI,OAAO;IACP,4BAA4B;IAC5B,kBAAkB;AACtB;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,yBAAyB;IACzB,gBAAgB;IAChB,YAAY;AAChB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,aAAa;IACb,eAAe;IACf,yBAAiB;OAAjB,sBAAiB;YAAjB,iBAAiB;AACrB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,QAAQ;IACR,aAAa;IACb,YAAY;AAChB;AAEA;IACI,6BAA6B;IAC7B,sBAAsB;IACtB,cAAc;IACd,mCAAmC;IACnC,oCAAoC;IACpC,+BAA+B;IAC/B,gCAAgC;IAChC,2BAA2B;IAC3B,4BAA4B;IAC5B,eAAe;AACnB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,yBAAyB;IACzB,6BAA6B;AACjC;AAEA;IACI,yBAAyB;IACzB,6BAA6B;AACjC;AAEA;IACI,eAAe;IACf,mBAAmB;AACvB;AAEA;IACI,aAAa;IACb,yBAAyB;IACzB,iBAAiB;IACjB,UAAU;IACV,WAAW;IACX,YAAY;AAChB;AAEA;IACI,WAAW;IACX,oBAAoB;IACpB,qBAAqB;IACrB,eAAe;IACf;AACJ;AAEA;IACI,yBAAyB;AAC7B;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,WAAW;IACX,WAAW;AACf;AAEA;IACI,sBAAsB;IACtB,WAAW;AACf;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,yBAAyB;IACzB,YAAY;IACZ,WAAW;IACX,YAAY;AAChB;AAEA;IACI,eAAe;IACf,WAAW;IACX,aAAa;IACb,gBAAgB;AACpB;;;;;;AClJA;IACI,eAAe;IACf,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;IAGhB,kBAAkB;IAClB,eAAe;AACnB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,aAAa;IACb,eAAe;IACf,yBAAiB;OAAjB,sBAAiB;YAAjB,iBAAiB;AACrB;AAEA;IACI,6BAA6B;IAC7B,sBAAsB;IACtB,cAAc;IACd,mCAAmC;IACnC,oCAAoC;IACpC,+BAA+B;IAC/B,gCAAgC;IAChC,2BAA2B;IAC3B,4BAA4B;IAC5B,eAAe;AACnB;AAEA;IACI,yBAAyB;IACzB,6BAA6B;AACjC;;;;;;AClCA;IACI,gBAAgB;IAChB,iCAAiC;IACjC,aAAa;IACb,mBAAmB;IACnB,aAAa;AACjB;AAEA;IACI,OAAO;AACX;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,YAAY;IACZ,QAAQ;IACR,SAAS;AACb;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,YAAY;IACZ,QAAQ;IACR,UAAU;AACd","sources":["webpack://@ucsjs/workspace/./editor/src/components/layout/LayoutPanel.vue","webpack://@ucsjs/workspace/./editor/src/components/layout/LayoutDragPreview.vue","webpack://@ucsjs/workspace/./editor/src/components/layout/Layout.vue"],"sourcesContent":["<template>\r\n    <div class=\"layout-panel\">\r\n        <div \r\n            :class=\"[(mouseOver && storage.inDrag) ? 'layout-panel-dropzone' : '','layout-panel-row layout-panel-drop']\" \r\n            v-for=\"(row, keyRow) in content.rows\" :key=\"keyRow\"\r\n            :id=\"id\"\r\n        >\r\n            <div class=\"layout-panel-top-resize\" v-if=\"keyRow > 0\" @drag=\"resizeVertical($event, keyRow)\">\r\n                <div class=\"layout-panel-top-resize-handle\"></div>\r\n            </div>\r\n\r\n            <div \r\n                class=\"layout-panel-row-contents\"                 \r\n                @drop=\"dropItem\" \r\n            >\r\n                <header v-if=\"row.items && row.items?.length > 0\" class=\"layout-item-header\" :id=\"id\" :row=\"keyRow\">\r\n                    <div \r\n                        v-for=\"(item, key) in row.items\" \r\n                        :key=\"item.namespace\" \r\n                        :class=\"[(row.currentItemSelected === key) ? 'layout-item-active' : 'layout-item']\"\r\n                        draggable=\"true\"\r\n                        @click=\"selectItem(keyRow, key)\"\r\n                        @dragstart=\"startDrag(item, keyRow, key, $event)\"\r\n                        @mouseover=\"handleMouseOver\"\r\n                    >\r\n                        <i :class=\"item.icon\" v-if=\"item.icon\" class=\"layout-item-icon\" />\r\n                        <span>{{ item.namespace }}</span>\r\n                    </div>\r\n\r\n                    <div class=\"layout-item-minimenu\">\r\n                        <button class=\"layout-item-minimenu-button\"><i class=\"fa-solid fa-ellipsis-vertical\"></i></button>\r\n                    </div>\r\n                </header>\r\n\r\n                <div class=\"layout-item-header-dropzone\" v-if=\"storage.inDrag\" :id=\"id\" :row=\"keyRow\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"layout-item-bottom-dropzone\" v-if=\"storage.inDrag\" :id=\"id\"></div>\r\n        <div class=\"layout-panel-resize-box\" @drop=\"finishResize\" @mousemove=\"resizeMoveMouse\" v-if=\"resizeBox\"></div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.layout-panel{\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    position: relative;\r\n    gap: 1px;\r\n}\r\n\r\n.layout-panel-row{\r\n    flex: 1;\r\n    border-right: 2px solid #000;\r\n    margin-bottom: 1px;\r\n}\r\n\r\n.layout-panel-row-contents {\r\n    position: relative;\r\n    min-width: 300px;\r\n    background-color: #3c3c3c;\r\n    overflow: hidden;   \r\n    height: 100%; \r\n}\r\n\r\n.layout-panel header {\r\n    width: 100%;\r\n    height: 30px;\r\n    background-color: #282828;\r\n    display: flex;\r\n    font-size: 14px;\r\n    user-select: none;\r\n}\r\n\r\n.layout-item-header-dropzone{\r\n    position: absolute;\r\n    left: 0px;\r\n    right: 0px;\r\n    top: 0px;\r\n    height: 300px;\r\n    z-index: 999;\r\n}\r\n\r\n.layout-panel header .layout-item, .layout-item-active {\r\n    border-top: 3px solid #282828;\r\n    padding: 0 10px 0 10px;\r\n    color: #c4c4c4;\r\n    -webkit-border-top-left-radius: 3px;\r\n    -webkit-border-top-right-radius: 3px;\r\n    -moz-border-radius-topleft: 3px;\r\n    -moz-border-radius-topright: 3px;\r\n    border-top-left-radius: 3px;\r\n    border-top-right-radius: 3px;\r\n    cursor: default;\r\n}\r\n\r\n.layout-panel header .layout-item:hover {\r\n    background-color: #303030;\r\n    color: #c4c4c4;\r\n}\r\n\r\n.layout-panel header .layout-item-active {\r\n    background-color: #3c3c3c;\r\n    border-top: 2px solid #2c5d87;\r\n}\r\n\r\n.layout-panel header .layout-item-active:hover {\r\n    background-color: #3c3c3c;\r\n    border-top: 2px solid #2c5d87;\r\n}\r\n\r\n.layout-item-icon{\r\n    font-size: 12px;\r\n    padding-right: 10px;\r\n}\r\n\r\n.layout-item-minimenu{\r\n    display: flex; \r\n    justify-content: flex-end;\r\n    margin-left: auto;\r\n    right: 0px;\r\n    width: 50px;\r\n    height: 100%;\r\n}\r\n\r\n.layout-item-minimenu-button{\r\n    width: 20px;\r\n    padding: 0 5px 0 5px;\r\n    margin: 2px 2px 2px 0;\r\n    cursor: default;\r\n    color: #c4c4c4\r\n}\r\n\r\n.layout-item-minimenu-button:hover{\r\n    background-color: #3c3c3c;\r\n}\r\n\r\n.layout-item-bottom-dropzone{\r\n    position: absolute;\r\n    height: 300px;\r\n    width: 100%;\r\n    bottom: 0px;\r\n}\r\n\r\n.layout-panel-top-resize{\r\n    background-color: #000;\r\n    height: 2px;\r\n}\r\n\r\n.layout-panel-top-resize-handle{\r\n    position: absolute;\r\n    cursor: ns-resize;\r\n    background-color: #2c5d87;\r\n    height: 10px;\r\n    width: 100%;\r\n    z-index: 999;\r\n}\r\n\r\n.layout-panel-resize-box{\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100em;\r\n    z-index: 9999999;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { uuid } from \"vue3-uuid\";\r\nimport { defineComponent, PropType, ref } from 'vue';\r\n\r\nimport { ILayoutItem, ILayoutPanel } from '../../interfaces';\r\nimport { dragStorage } from \"../../stores/dragStorage\";\r\nimport { componentIndexStorage } from \"../../stores/componentIndex\";\r\n\r\nexport default defineComponent({\r\n    props: {\r\n        content: {\r\n            type: Object as PropType<ILayoutPanel>,\r\n            required: true,\r\n            default: { rows: [] }\r\n        }\r\n    },\r\n\r\n    setup(props, context) {\r\n        const storage = dragStorage();\r\n        const componentIndex = componentIndexStorage();\r\n        const id = uuid.v4();\r\n        const resizeBox = ref(false);\r\n\r\n        componentIndex.register(id, props, context);\r\n\r\n        let mouseOver = ref(false);\r\n\r\n        const selectItem = (row: number, index: number) => {\r\n            if(index != props.content.rows[row].currentItemSelected)\r\n                props.content.rows[row].currentItemSelected = index;\r\n        };\r\n\r\n        const startDrag = (item: ILayoutItem, keyRow: number, index: number, event: DragEvent) => {\r\n            storage.startDrap(item, props.content, keyRow, index); \r\n\r\n            if(props.content.rows && props.content.rows[keyRow]){\r\n                props.content.rows[keyRow].items = props.content.rows[keyRow].items.filter((value, key) => key !== index); \r\n                props.content.rows[keyRow].currentItemSelected = 0;\r\n            }\r\n\r\n            event.preventDefault();\r\n\r\n            if(event && event.dataTransfer)\r\n                event.dataTransfer.setDragImage(new Image(), 0, 0);\r\n        };\r\n\r\n        const dropItem = (event: DragEvent) => {\r\n            event.preventDefault();\r\n            let data = storage.endDrap();\r\n        };\r\n\r\n        const handleMouseOver = (event: MouseEvent) => {\r\n            mouseOver.value = true;\r\n            event.preventDefault();\r\n\r\n            if(event && event.target)\r\n                storage.setTarget(event.target);            \r\n        };\r\n\r\n        const resizeVertical = (event: DragEvent, index: number) => {\r\n            resizeBox.value = true;\r\n        };\r\n\r\n        const resizeMoveMouse = (event: MouseEvent) => {\r\n\r\n        };\r\n\r\n        const finishResize = () => {\r\n\r\n        };\r\n\r\n        return {\r\n            id,\r\n            storage,\r\n            resizeBox,\r\n            selectItem,\r\n            startDrag,\r\n            dropItem,\r\n            handleMouseOver,  \r\n            resizeVertical, \r\n            resizeMoveMouse,\r\n            finishResize,         \r\n            componentIndex,\r\n            mouseOver\r\n        };\r\n    }\r\n});\r\n</script>\r\n","<template>\r\n    <div \r\n        :class=\"[(hiddenPreview) ? 'layout-item-drag-preview-hidden' : '', 'layout-item-drag-preview layout-panel']\" \r\n        :style=\"{top: `${position.y - 90}px`, left: `${position.x - 135}px`}\" \r\n        @mouseup=\"dropItem\"\r\n        @mousemove=\"moveItem\"\r\n        v-if=\"storage.inDrag\"\r\n    >\r\n        <header >\r\n            <div class=\"layout-item-active\">\r\n                <i :class=\"storage.item?.icon\" v-if=\"storage.item?.icon\" class=\"layout-item-icon\" />\r\n                <span>{{ storage.item?.namespace }}</span>\r\n            </div>\r\n        </header>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.layout-item-drag-preview{\r\n    position: fixed;\r\n    width: 270px;\r\n    height: 180px;\r\n    border: 1px solid #000;\r\n    background-color: #3c3c3c;\r\n    overflow: hidden;\r\n    -webkit-border-radius: 3px;\r\n    -moz-border-radius: 3px;\r\n    border-radius: 3px;\r\n    z-index: 999999;\r\n}\r\n\r\n.layout-panel header {\r\n    width: 100%;\r\n    height: 30px;\r\n    background-color: #282828;\r\n    display: flex;\r\n    font-size: 14px;\r\n    user-select: none;\r\n}\r\n\r\n.layout-panel header .layout-item, .layout-item-active {\r\n    border-top: 3px solid #282828;\r\n    padding: 0 10px 0 10px;\r\n    color: #c4c4c4;\r\n    -webkit-border-top-left-radius: 3px;\r\n    -webkit-border-top-right-radius: 3px;\r\n    -moz-border-radius-topleft: 3px;\r\n    -moz-border-radius-topright: 3px;\r\n    border-top-left-radius: 3px;\r\n    border-top-right-radius: 3px;\r\n    cursor: default;\r\n}\r\n\r\n.layout-panel header .layout-item-active {\r\n    background-color: #3c3c3c;\r\n    border-top: 3px solid #2c5d87;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, watch, ref } from 'vue';\r\nimport { ILayoutItem, ILayoutPanel } from \"../../interfaces\";\r\nimport { dragStorage } from \"../../stores/dragStorage\";\r\nimport { componentIndexStorage } from \"../../stores/componentIndex\";\r\nimport { globalMixin } from \"../../lib/mixin\";\r\n\r\nexport default defineComponent({\r\n    emits: {\r\n        addItemRoot: (data: ILayoutItem, unshift: boolean) => true,\r\n        change: () => true,\r\n        drop: () => true\r\n    },\r\n\r\n    setup(props, context) {\r\n        const storage = dragStorage();\r\n        const componentIndex = componentIndexStorage();\r\n        const position = ref({ x: 0, y: 0 });\r\n        const hiddenPreview = ref(false);\r\n\r\n        const updatePosition = (event) => {\r\n            position.value = { x: event.pageX, y: event.pageY };\r\n        };\r\n\r\n        watch(() => storage.$state, (newValue, oldValue) => {\r\n            console.log('DrapStorage foi alterado:', newValue);\r\n        });\r\n\r\n        const moveItem = (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            let data = storage.item as ILayoutItem;\r\n\r\n            const componentBottom = globalMixin.getComponentFromPoint(event, \"layout-item-bottom-dropzone\");\r\n            const componentHeader = globalMixin.getComponentHeader(event);\r\n            const component = globalMixin.getComponentFromPoint(event);            \r\n            const layoutDropArea = globalMixin.getLayoutDropZone(event);\r\n\r\n            hiddenPreview.value = true;\r\n\r\n            if(layoutDropArea){\r\n                try{\r\n                    switch(layoutDropArea){\r\n                        case \"left\": context.emit(\"addItemRoot\", data, true);\r\n                        case \"right\": context.emit(\"addItemRoot\", data, false);\r\n                    }    \r\n                    \r\n                    context.emit(\"change\");\r\n                }\r\n                catch(e){}\r\n            }\r\n            else if(componentBottom){ //Create new row   \r\n                context.emit(\"drop\");\r\n\r\n                const { props } = component;\r\n                let content = props.content as ILayoutPanel;\r\n\r\n                if(content && content.rows){\r\n                    storage.removeItemFromCurrentPanel(data.id, \"componentBottom\");                    \r\n                    content.rows.push({ items: [ data ], currentItemSelected: 0 }); \r\n                    storage.changePanel(content, { row: content.rows.length -1,  index: 0 });\r\n                    context.emit(\"change\");\r\n                } \r\n            }\r\n            else if(componentHeader){ //On header\r\n                context.emit(\"drop\");\r\n\r\n                const { props } = component;\r\n                let content = props.content as ILayoutPanel;\r\n\r\n                if(content && content.rows && componentHeader.row){\r\n                    storage.removeItemFromCurrentPanel(data.id, \"componentHeader\");                    \r\n                    content.rows[componentHeader.row].items.push(data); \r\n                    storage.changePanel(content, { row: content.rows.length -1,  index: 0 });\r\n                    context.emit(\"change\");\r\n                } \r\n            }            \r\n            else if(component){ //Drop on panel    \r\n                context.emit(\"drop\");\r\n\r\n                const { props } = component;\r\n                let content = props.content as ILayoutPanel;\r\n\r\n                if(content && content.rows && !storage.isCurrentPanel(content)){\r\n                    storage.removeItemFromCurrentPanel(data.id, \"component\");                              \r\n                    content.rows[0].items.push(data);\r\n                    content.rows[0].currentItemSelected = content.rows[0].items.length - 1;\r\n                    storage.changePanel(content, { row: 0,  index: content.rows[0].items.length - 1 });\r\n                    context.emit(\"change\");\r\n                }                    \r\n            }\r\n        }\r\n\r\n        const dropItem = (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            storage.endDrap();     \r\n            context.emit(\"drop\");  \r\n        };\r\n\r\n        return {\r\n            storage,\r\n            componentIndex,\r\n            position,\r\n            hiddenPreview,\r\n            dropItem,\r\n            moveItem,\r\n            updatePosition,                        \r\n            item: {} as ILayoutItem\r\n        };\r\n    },\r\n\r\n    mounted(){\r\n        window.addEventListener('mousemove', this.updatePosition);\r\n    },\r\n\r\n    beforeUnmount() {\r\n        window.removeEventListener('mousemove', this.updatePosition);\r\n    },\r\n\r\n    methods: {\r\n        updatePosition(event){\r\n            this.position = { x: event.pageX, y: event.pageY };\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"layout-box\">\r\n        <LayoutPanel \r\n            v-for=\"(value, key) in contents\" \r\n            :key=\"key\" \r\n            :content=\"value\" \r\n            class=\"layout-panel\"\r\n            @mousemove=\"removeEmptyPanels\"\r\n        >\r\n            <slot/>\r\n        </LayoutPanel>\r\n\r\n        <LayoutDragPreview @addItemRoot=\"addItemRoot\" @change=\"removeEmptyPanels\" @drop=\"drop\"></LayoutDragPreview>\r\n\r\n        <div class=\"layout-drop-areas\" v-if=\"storage.inDrag\">\r\n            <div class=\"layout-drop-area-left layout-drop-area\" direction=\"left\"></div>\r\n            <div class=\"layout-drop-area-right layout-drop-area\" direction=\"right\"></div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.layout-box {\r\n    overflow: hidden;\r\n    background-color: rgb(67, 67, 67);\r\n    display: flex; \r\n    flex-direction: row; \r\n    height: 100vh;\r\n}\r\n\r\n.layout-panel {\r\n    flex: 1;\r\n}\r\n\r\n.layout-drop-area-left {\r\n    position: fixed;\r\n    min-width: 100px;\r\n    height: 100%;\r\n    z-index: 999;\r\n    top: 0px;\r\n    left: 0px;\r\n}\r\n\r\n.layout-drop-area-right {\r\n    position: fixed;\r\n    min-width: 100px;\r\n    height: 100%;\r\n    z-index: 999;\r\n    top: 0px;\r\n    right: 0px;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\nimport { uuid } from \"vue3-uuid\";\r\n\r\nimport { componentIndexStorage } from \"../../stores/componentIndex\";\r\nimport { dragStorage } from \"../../stores/dragStorage\";\r\nimport { ILayoutItem, ILayout, ILayoutPanel } from \"../../interfaces\";\r\nimport LayoutPanel from \"./LayoutPanel.vue\";\r\nimport LayoutDragPreview from \"./LayoutDragPreview.vue\";\r\n\r\nexport default defineComponent({\r\n    components: { \r\n        LayoutPanel,\r\n        LayoutDragPreview\r\n    },\r\n\r\n    setup(props, context){\r\n        const componentIndex = componentIndexStorage();\r\n        const storage = dragStorage();\r\n        componentIndex.setLayout({ props, context });\r\n        return { storage };\r\n    },\r\n\r\n    data(): ILayout {\r\n        return {            \r\n            index: new Map<string, ILayoutItem>(),\r\n            previewDragPainel: null,\r\n            dropAreaSelected: null,\r\n            contents: [\r\n                {\r\n                        id: uuid.v4(),                        \r\n                        rows: [{\r\n                            currentItemSelected: 0,\r\n                            items: [\r\n                                { id: uuid.v4(), namespace: \"item 1\", icon: \"fa-solid fa-file\", items: [] }\r\n                            ]\r\n                        }]                        \r\n                    }\r\n            ] \r\n        }\r\n    },\r\n\r\n    methods: {\r\n        addItemRoot(item: ILayoutItem, unshift: boolean) {\r\n            if(this.previewDragPainel === null){\r\n                this.previewDragPainel = item.id;\r\n\r\n                if(this.storage.currentPanel && this.storage.currentPanel.rows && this.storage.position){\r\n                    this.storage.currentPanel.rows[this.storage.position.row].items = this.storage.currentPanel.rows[this.storage.position.row].\r\n                        items.filter((value, key) => (value as ILayoutItem).id !== item.id); \r\n                }\r\n\r\n                let newPanel : ILayoutPanel =  {\r\n                    id: uuid.v4(),\r\n                    rows: [ { items: [ item ], currentItemSelected: 0 } ]\r\n                };\r\n\r\n                if(unshift)\r\n                    this.contents.unshift(newPanel);\r\n                else \r\n                    this.contents.push(newPanel);\r\n\r\n                this.removeEmptyPanels();\r\n            }\r\n        },\r\n\r\n        drop(){\r\n            this.previewDragPainel = null;\r\n        },\r\n\r\n        removeEmptyPanels(){\r\n            if(this.storage.inDrag){\r\n                this.contents = this.contents.filter((item) => item.rows.length > 0); \r\n                this.reIndex();\r\n            }               \r\n        },\r\n\r\n        reIndex(){\r\n            for(let itemKey in this.index){\r\n                if(this.contents.filter((item) => item.id === itemKey).length === 0){\r\n                    this.index.delete(itemKey);\r\n                }\r\n            }                \r\n        }\r\n    }\r\n});\r\n</script>\r\n"],"names":[],"sourceRoot":""}