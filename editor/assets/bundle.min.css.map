{"version":3,"file":"assets/bundle.min.css","mappings":"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","sources":["webpack:///../../node_modules/vue3-perfect-scrollbar/dist/vue3-perfect-scrollbar.css","webpack:///./components/layout/LayoutPanel.vue","webpack:///./components/layout/LayoutDragPreview.vue","webpack:///./components/blueprint/BlueprintNavbar.vue","webpack:///./components/blueprint/BlueprintContextMenu.vue","webpack:///./components/blueprint/BlueprintInputs.vue","webpack:///./components/blueprint/BlueprintConnection.vue","webpack:///./components/blueprint/BlueprintComponent.vue","webpack:///./components/blueprint/BlueprintInspector.vue","webpack:///./components/windows/Modal.vue","webpack:///./components/navigation/Tabs.vue","webpack:///./components/form/Input.vue","webpack:///./components/blueprint/BlueprintNodesNavbar.vue","webpack:///./components/blueprint/BlueprintEditor.vue","webpack:///./components/layout/Layout.vue"],"sourcesContent":["/*\n * Container style\n */\n.ps {\n  overflow: hidden !important;\n  overflow-anchor: none;\n  -ms-overflow-style: none;\n  touch-action: auto;\n  -ms-touch-action: auto;\n}\n/*\n * Scrollbar rail styles\n */\n.ps__rail-x {\n  display: none;\n  opacity: 0;\n  transition: background-color .2s linear, opacity .2s linear;\n  -webkit-transition: background-color .2s linear, opacity .2s linear;\n  height: 15px;\n  /* there must be 'bottom' or 'top' for ps__rail-x */\n  bottom: 0px;\n  /* please don't change 'position' */\n  position: absolute;\n}\n.ps__rail-y {\n  display: none;\n  opacity: 0;\n  transition: background-color .2s linear, opacity .2s linear;\n  -webkit-transition: background-color .2s linear, opacity .2s linear;\n  width: 15px;\n  /* there must be 'right' or 'left' for ps__rail-y */\n  right: 0;\n  /* please don't change 'position' */\n  position: absolute;\n}\n.ps--active-x > .ps__rail-x,\n.ps--active-y > .ps__rail-y {\n  display: block;\n  background-color: transparent;\n}\n.ps:hover > .ps__rail-x,\n.ps:hover > .ps__rail-y,\n.ps--focus > .ps__rail-x,\n.ps--focus > .ps__rail-y,\n.ps--scrolling-x > .ps__rail-x,\n.ps--scrolling-y > .ps__rail-y {\n  opacity: 0.6;\n}\n.ps .ps__rail-x:hover,\n.ps .ps__rail-y:hover,\n.ps .ps__rail-x:focus,\n.ps .ps__rail-y:focus,\n.ps .ps__rail-x.ps--clicking,\n.ps .ps__rail-y.ps--clicking {\n  background-color: #eee;\n  opacity: 0.9;\n}\n/*\n * Scrollbar thumb styles\n */\n.ps__thumb-x {\n  background-color: #aaa;\n  border-radius: 6px;\n  transition: background-color .2s linear, height .2s ease-in-out;\n  -webkit-transition: background-color .2s linear, height .2s ease-in-out;\n  height: 6px;\n  /* there must be 'bottom' for ps__thumb-x */\n  bottom: 2px;\n  /* please don't change 'position' */\n  position: absolute;\n}\n.ps__thumb-y {\n  background-color: #aaa;\n  border-radius: 6px;\n  transition: background-color .2s linear, width .2s ease-in-out;\n  -webkit-transition: background-color .2s linear, width .2s ease-in-out;\n  width: 6px;\n  /* there must be 'right' for ps__thumb-y */\n  right: 2px;\n  /* please don't change 'position' */\n  position: absolute;\n}\n.ps__rail-x:hover > .ps__thumb-x,\n.ps__rail-x:focus > .ps__thumb-x,\n.ps__rail-x.ps--clicking .ps__thumb-x {\n  background-color: #999;\n  height: 11px;\n}\n.ps__rail-y:hover > .ps__thumb-y,\n.ps__rail-y:focus > .ps__thumb-y,\n.ps__rail-y.ps--clicking .ps__thumb-y {\n  background-color: #999;\n  width: 11px;\n}\n/* MS supports */\n@supports (-ms-overflow-style: none) {\n  .ps {\n    overflow: auto !important;\n  }\n}\n@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n  .ps {\n    overflow: auto !important;\n  }\n}\n.ps {\n    position: relative;\n}","<template>\r\n    <div class=\"layout-panel\">\r\n        <div \r\n            :class=\"[(mouseOver && storage.inDrag) ? 'layout-panel-dropzone' : '','layout-panel-row layout-panel-drop']\" \r\n            v-for=\"(row, keyRow) in content.rows\" :key=\"keyRow\"\r\n            :id=\"id\"\r\n        >\r\n            <div class=\"layout-panel-top-resize\" v-if=\"keyRow > 0\" @drag=\"resizeVertical($event, keyRow)\">\r\n                <div class=\"layout-panel-top-resize-handle\"></div>\r\n            </div>\r\n\r\n            <div \r\n                class=\"layout-panel-row-contents\"                 \r\n                @drop=\"dropItem\" \r\n            >\r\n                <header v-if=\"row.items && row.items?.length > 0\" class=\"layout-item-header\" :id=\"id\" :row=\"keyRow\">\r\n                    <div \r\n                        v-for=\"(item, key) in row.items\" \r\n                        :key=\"item.namespace\" \r\n                        :class=\"[(row.currentItemSelected === key) ? 'layout-item-active' : 'layout-item']\"\r\n                        draggable=\"true\"\r\n                        @click=\"selectItem(keyRow, key)\"\r\n                        @dragstart=\"startDrag(item, keyRow, key, $event)\"\r\n                        @mouseover=\"handleMouseOver\"\r\n                    >\r\n                        <i :class=\"item.icon\" v-if=\"item.icon\" class=\"layout-item-icon\" />\r\n                        <span>{{ item.namespace }}</span>\r\n                    </div>\r\n\r\n                    <div class=\"layout-item-minimenu\">\r\n                        <button class=\"layout-item-minimenu-button\"><i class=\"fa-solid fa-ellipsis-vertical\"></i></button>\r\n                    </div>\r\n                </header>\r\n\r\n                <main v-if=\"row.items && row.items?.length > 0\" :id=\"id\">\r\n                    <div v-for=\"(item, key) in row.items\" :key=\"item.id\" class=\"layout-panel-contents\">                        \r\n                        <component \r\n                            v-if=\"item.content && row.currentItemSelected === key\" \r\n                            :is=\"item.content\" \r\n                            :id=\"item.id\"\r\n                            :name=\"item.namespace\"\r\n                        ></component>\r\n                    </div>                    \r\n                </main>\r\n\r\n                <div class=\"layout-item-header-dropzone\" v-if=\"storage.inDrag\" :id=\"id\" :row=\"keyRow\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"layout-item-bottom-dropzone\" v-if=\"storage.inDrag\" :id=\"id\"></div>\r\n        <div class=\"layout-panel-resize-box\" @drop=\"finishResize\" @mousemove=\"resizeMoveMouse\" v-if=\"resizeBox\"></div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.layout-panel{\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    gap: 1px;\r\n}\r\n\r\n.layout-panel-row{\r\n    flex: 1;\r\n    border-right: 2px solid #000;\r\n    margin-bottom: 1px;\r\n    overflow: hidden;\r\n}\r\n\r\n.layout-panel-row-contents {\r\n    position: relative;\r\n    min-width: 300px;\r\n    width: 100%;\r\n    background-color: #3c3c3c;\r\n    overflow: hidden;   \r\n    height: 100%; \r\n}\r\n\r\n.layout-panel header {\r\n    width: 100%;\r\n    height: 30px;\r\n    background-color: #282828;\r\n    display: flex;\r\n    font-size: 14px;\r\n    user-select: none;\r\n}\r\n\r\n.layout-panel main {\r\n    width: auto;\r\n    height: calc(100% - 30px);\r\n    background-color: #282828;\r\n    display: flex;\r\n    font-size: 14px;\r\n    user-select: none;\r\n}\r\n\r\n.layout-item-header-dropzone{\r\n    position: absolute;\r\n    left: 0px;\r\n    right: 0px;\r\n    top: 0px;\r\n    height: 300px;\r\n    z-index: 999;\r\n}\r\n\r\n.layout-panel header .layout-item, .layout-item-active {\r\n    border-top: 3px solid #282828;\r\n    padding: 0 10px 0 10px;\r\n    color: #c4c4c4;\r\n    -webkit-border-top-left-radius: 3px;\r\n    -webkit-border-top-right-radius: 3px;\r\n    -moz-border-radius-topleft: 3px;\r\n    -moz-border-radius-topright: 3px;\r\n    border-top-left-radius: 3px;\r\n    border-top-right-radius: 3px;\r\n    cursor: default;\r\n}\r\n\r\n.layout-panel header .layout-item:hover {\r\n    background-color: #303030;\r\n    color: #c4c4c4;\r\n}\r\n\r\n.layout-panel header .layout-item-active {\r\n    background-color: #3c3c3c;\r\n    border-top: 2px solid #2c5d87;\r\n}\r\n\r\n.layout-panel header .layout-item-active:hover {\r\n    background-color: #3c3c3c;\r\n    border-top: 2px solid #2c5d87;\r\n}\r\n\r\n.layout-item-icon{\r\n    font-size: 12px;\r\n    padding-right: 10px;\r\n}\r\n\r\n.layout-item-minimenu{\r\n    display: flex; \r\n    justify-content: flex-end;\r\n    margin-left: auto;\r\n    right: 0px;\r\n    width: 50px;\r\n    height: 100%;\r\n}\r\n\r\n.layout-item-minimenu-button{\r\n    width: 20px;\r\n    padding: 0 5px 0 5px;\r\n    margin: 2px 2px 2px 0;\r\n    cursor: default;\r\n    color: #c4c4c4\r\n}\r\n\r\n.layout-item-minimenu-button:hover{\r\n    background-color: #3c3c3c;\r\n}\r\n\r\n.layout-item-bottom-dropzone{\r\n    position: absolute;\r\n    height: 300px;\r\n    width: 100%;\r\n    bottom: 0px;\r\n}\r\n\r\n.layout-panel-top-resize{\r\n    background-color: #000;\r\n    height: 2px;\r\n}\r\n\r\n.layout-panel-top-resize-handle{\r\n    position: absolute;\r\n    cursor: ns-resize;\r\n    background-color: #2c5d87;\r\n    height: 10px;\r\n    width: 100%;\r\n    z-index: 999;\r\n}\r\n\r\n.layout-panel-resize-box{\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100em;\r\n    z-index: 9999999;\r\n}\r\n\r\n.layout-panel-contents{\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { uuid } from \"vue3-uuid\";\r\nimport { defineComponent, PropType, ref } from 'vue';\r\n\r\nimport { ILayoutItem, ILayoutPanel } from '../../interfaces';\r\nimport { dragStorage } from \"../../stores/dragStorage\";\r\nimport { componentIndexStorage } from \"../../stores/componentIndex\";\r\n\r\nexport default defineComponent({\r\n    props: {\r\n        content: {\r\n            type: Object as PropType<ILayoutPanel>,\r\n            required: true,\r\n            default: { rows: [] }\r\n        }\r\n    },\r\n\r\n    setup(props, context) {\r\n        const storage = dragStorage();\r\n        const componentIndex = componentIndexStorage();\r\n        const id = uuid.v4();\r\n        const resizeBox = ref(false);\r\n\r\n        componentIndex.register(id, props, context);\r\n\r\n        let mouseOver = ref(false);\r\n\r\n        const selectItem = (row: number, index: number) => {\r\n            if(index != props.content.rows[row].currentItemSelected)\r\n                props.content.rows[row].currentItemSelected = index;\r\n        };\r\n\r\n        const startDrag = (item: ILayoutItem, keyRow: number, index: number, event: DragEvent) => {\r\n            storage.startDrap(item, props.content, keyRow, index); \r\n\r\n            if(props.content.rows && props.content.rows[keyRow]){\r\n                props.content.rows[keyRow].items = props.content.rows[keyRow].items.filter((value, key) => key !== index); \r\n                props.content.rows[keyRow].currentItemSelected = 0;\r\n            }\r\n\r\n            event.preventDefault();\r\n\r\n            if(event && event.dataTransfer)\r\n                event.dataTransfer.setDragImage(new Image(), 0, 0);\r\n        };\r\n\r\n        const dropItem = (event: DragEvent) => {\r\n            event.preventDefault();\r\n            //let data = storage.endDrap();\r\n        };\r\n\r\n        const handleMouseOver = (event: MouseEvent) => {\r\n            mouseOver.value = true;\r\n            event.preventDefault();\r\n\r\n            if(event && event.target)\r\n                storage.setTarget(event.target);            \r\n        };\r\n\r\n        const resizeVertical = (event: DragEvent, index: number) => {\r\n            resizeBox.value = true;\r\n        };\r\n\r\n        const resizeMoveMouse = (event: MouseEvent) => {\r\n\r\n        };\r\n\r\n        const finishResize = () => {\r\n\r\n        };\r\n\r\n        return {\r\n            id,\r\n            storage,\r\n            resizeBox,\r\n            selectItem,\r\n            startDrag,\r\n            dropItem,\r\n            handleMouseOver,  \r\n            resizeVertical, \r\n            resizeMoveMouse,\r\n            finishResize,         \r\n            componentIndex,\r\n            mouseOver\r\n        };\r\n    }\r\n});\r\n</script>\r\n","<template>\r\n    <div \r\n        :class=\"[(hiddenPreview) ? 'layout-item-drag-preview-hidden' : '', 'layout-item-drag-preview layout-panel']\" \r\n        :style=\"{top: `${position.y - 90}px`, left: `${position.x - 135}px`}\" \r\n        @mouseup=\"dropItem\"\r\n        @mousemove=\"moveItem\"\r\n        v-if=\"storage.inDrag\"\r\n    >\r\n        <header >\r\n            <div class=\"layout-item-active\">\r\n                <i :class=\"storage.item?.icon\" v-if=\"storage.item?.icon\" class=\"layout-item-icon\" />\r\n                <span>{{ storage.item?.namespace }}</span>\r\n            </div>\r\n        </header>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.layout-item-drag-preview{\r\n    position: fixed;\r\n    width: 270px;\r\n    height: 180px;\r\n    border: 1px solid #000;\r\n    background-color: #3c3c3c;\r\n    overflow: hidden;\r\n    -webkit-border-radius: 3px;\r\n    -moz-border-radius: 3px;\r\n    border-radius: 3px;\r\n    z-index: 999999;\r\n}\r\n\r\n.layout-panel header {\r\n    width: 100%;\r\n    height: 30px;\r\n    background-color: #282828;\r\n    display: flex;\r\n    font-size: 14px;\r\n    user-select: none;\r\n}\r\n\r\n.layout-panel header .layout-item, .layout-item-active {\r\n    border-top: 3px solid #282828;\r\n    padding: 0 10px 0 10px;\r\n    color: #c4c4c4;\r\n    -webkit-border-top-left-radius: 3px;\r\n    -webkit-border-top-right-radius: 3px;\r\n    -moz-border-radius-topleft: 3px;\r\n    -moz-border-radius-topright: 3px;\r\n    border-top-left-radius: 3px;\r\n    border-top-right-radius: 3px;\r\n    cursor: default;\r\n}\r\n\r\n.layout-panel header .layout-item-active {\r\n    background-color: #3c3c3c;\r\n    border-top: 3px solid #2c5d87;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, watch, ref } from 'vue';\r\nimport { ILayoutItem, ILayoutPanel } from \"../../interfaces\";\r\nimport { dragStorage } from \"../../stores/dragStorage\";\r\nimport { componentIndexStorage } from \"../../stores/componentIndex\";\r\nimport { globalMixin } from \"../../lib/mixin\";\r\n\r\nexport default defineComponent({\r\n    emits: {\r\n        addItemRoot: (data: ILayoutItem, unshift: boolean) => true,\r\n        change: () => true,\r\n        drop: () => true\r\n    },\r\n\r\n    setup(props, context) {\r\n        const storage = dragStorage();\r\n        const componentIndex = componentIndexStorage();\r\n        const position = ref({ x: 0, y: 0 });\r\n        const hiddenPreview = ref(false);\r\n\r\n        const updatePosition = (event) => {\r\n            position.value = { x: event.pageX, y: event.pageY };\r\n        };\r\n\r\n        watch(() => storage.$state, (newValue, oldValue) => {\r\n            console.log('DrapStorage foi alterado:', newValue);\r\n        });\r\n\r\n        const moveItem = (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            let data = storage.item as ILayoutItem;\r\n\r\n            const componentBottom = globalMixin.getComponentFromPoint(event, \"layout-item-bottom-dropzone\");\r\n            const componentHeader = globalMixin.getComponentHeader(event);\r\n            const component = globalMixin.getComponentFromPoint(event);            \r\n            const layoutDropArea = globalMixin.getLayoutDropZone(event);\r\n\r\n            hiddenPreview.value = true;\r\n\r\n            if(layoutDropArea){\r\n                try{\r\n                    switch(layoutDropArea){\r\n                        case \"left\": context.emit(\"addItemRoot\", data, true);\r\n                        case \"right\": context.emit(\"addItemRoot\", data, false);\r\n                    }    \r\n                    \r\n                    context.emit(\"change\");\r\n                }\r\n                catch(e){}\r\n            }\r\n            else if(componentBottom){ //Create new row   \r\n                context.emit(\"drop\");\r\n\r\n                const { props } = component;\r\n                let content = props.content as ILayoutPanel;\r\n\r\n                if(content && content.rows){\r\n                    storage.removeItemFromCurrentPanel(data.id, \"componentBottom\");                    \r\n                    content.rows.push({ items: [ data ], currentItemSelected: 0 }); \r\n                    storage.changePanel(content, { row: content.rows.length -1,  index: 0 });\r\n                    context.emit(\"change\");\r\n                } \r\n            }\r\n            else if(componentHeader){ //On header\r\n                context.emit(\"drop\");\r\n\r\n                const { props } = component;\r\n                let content = props.content as ILayoutPanel;\r\n\r\n                if(content && content.rows && componentHeader.row){\r\n                    storage.removeItemFromCurrentPanel(data.id, \"componentHeader\");                    \r\n                    content.rows[componentHeader.row].items.push(data); \r\n                    storage.changePanel(content, { row: content.rows.length -1,  index: 0 });\r\n                    context.emit(\"change\");\r\n                } \r\n            }            \r\n            else if(component){ //Drop on panel    \r\n                context.emit(\"drop\");\r\n\r\n                const { props } = component;\r\n                let content = props.content as ILayoutPanel;\r\n\r\n                if(content && content.rows && !storage.isCurrentPanel(content)){\r\n                    storage.removeItemFromCurrentPanel(data.id, \"component\");                              \r\n                    content.rows[0].items.push(data);\r\n                    content.rows[0].currentItemSelected = content.rows[0].items.length - 1;\r\n                    storage.changePanel(content, { row: 0,  index: content.rows[0].items.length - 1 });\r\n                    context.emit(\"change\");\r\n                }                    \r\n            }\r\n        }\r\n\r\n        const dropItem = (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            storage.endDrap();     \r\n            context.emit(\"drop\");  \r\n        };\r\n\r\n        return {\r\n            storage,\r\n            componentIndex,\r\n            position,\r\n            hiddenPreview,\r\n            dropItem,\r\n            moveItem,\r\n            updatePosition,                        \r\n            item: {} as ILayoutItem\r\n        };\r\n    },\r\n\r\n    mounted(){\r\n        window.addEventListener('mousemove', this.updatePosition);\r\n    },\r\n\r\n    beforeUnmount() {\r\n        window.removeEventListener('mousemove', this.updatePosition);\r\n    },\r\n\r\n    methods: {\r\n        updatePosition(event){\r\n            this.position = { x: event.pageX, y: event.pageY };\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"blueprint-navbar\">\r\n        <button>Save</button>\r\n        <button>Save As...</button>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.blueprint-navbar{\r\n    width: 100%;\r\n    height: 35px;\r\n    background-color: #3c3c3c;\r\n    font-size: 12px;\r\n}\r\n\r\n.blueprint-navbar button{\r\n    padding: 5px 10px;\r\n    color: #bebebe;\r\n    border-right: 1px solid #232323;\r\n    height: 100%;\r\n}\r\n\r\n.blueprint-navbar button:hover{\r\n    background-color: #464646;\r\n}\r\n</style>","<template>\r\n    <div ref=\"blueprintContextMenu\">\r\n        <div @click=\"toggleMenu\">\r\n            <slot></slot>\r\n        </div>\r\n\r\n        <div v-if=\"isOpen\" class=\"blueprint-context-menu\">\r\n            <div\r\n                class=\"blueprint-context-menu-item\"\r\n                v-for=\"(item, index) in items\"\r\n                :key=\"index\"\r\n                @click=\"selectItem(item)\"\r\n            >\r\n                {{ item.label }}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n    .blueprint-context-menu {\r\n        position: absolute;\r\n        min-width: 150px;\r\n        background-color: #2b2b2b;\r\n        border: 1px solid #191919;\r\n        padding: 10px;\r\n        z-index: 999;\r\n        -webkit-border-radius: 5px;\r\n        -moz-border-radius: 5px;\r\n        border-radius: 5px;\r\n        user-select: none;\r\n        cursor: default;\r\n    }\r\n\r\n    .blueprint-context-menu-item {\r\n        cursor: default;\r\n        padding: 5px 0;\r\n        padding-left: 20px;\r\n    }\r\n\r\n    .blueprint-context-menu-item:hover {\r\n        background: #393939;\r\n    }\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue';\r\nimport { IBlueprintType } from \"../../interfaces/blueprint\";\r\n\r\nexport default defineComponent({\r\n    emits: { \r\n        select: (item: IBlueprintType) => true\r\n    },\r\n\r\n    props: {\r\n        items: {\r\n            type: Object as PropType<IBlueprintType[]>,\r\n            required: true,\r\n            default: []\r\n        }\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            isOpen: false\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        window.addEventListener('click', this.closeIfClickedOutside)\r\n    },\r\n\r\n    beforeUnmount() {\r\n        window.removeEventListener('click', this.closeIfClickedOutside)\r\n    },\r\n\r\n    methods: {\r\n        toggleMenu() {\r\n            this.isOpen = !this.isOpen;\r\n        },\r\n\r\n        selectItem(item) {\r\n            this.isOpen = false;\r\n            this.$emit('select', item);\r\n        },\r\n\r\n        closeIfClickedOutside(event) {\r\n            if (this.isOpen && !this.$refs.blueprintContextMenu.contains(event.target)) \r\n                this.isOpen = false;\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"blueprint-inputs\">\r\n        <header>\r\n            <span>Inputs</span>\r\n\r\n            <div class=\"blueprint-inputs-minimenu\">\r\n                <blueprint-context-menu :items=\"inputTypes\" @select=\"addInput\">\r\n                    <button class=\"blueprint-inputs-add\">\r\n                        <i class=\"fa-solid fa-plus\"></i>\r\n                    </button>\r\n                </blueprint-context-menu>                \r\n            </div>\r\n        </header>\r\n\r\n        <main class=\"blueprint-inputs-contents\">\r\n            <perfect-scrollbar>\r\n                <div v-for=\"(item, index) in inputs\" :key=\"index\" class=\"blueprint-inputs-item\">\r\n                    <div \r\n                        :class=\"[(selectedItem === item.id || itemOver === item.id) ? 'blueprint-inputs-item-selected' : '', 'blueprint-inputs-item-name']\" \r\n                        v-if=\"renameInput !== item.id\"\r\n                        @dragstart=\"$emit('start-drag', item)\" \r\n                        @mouseover=\"mouseOver(item.id)\"\r\n                        @mouseout=\"mouseOut\"\r\n                        @click=\"selectInput(item.id)\"\r\n                        @dblclick=\"rename(item.id)\"\r\n                        draggable=\"true\"\r\n                    >{{ item.name }}</div>\r\n                    <div class=\"blueprint-inputs-item-type\" v-if=\"renameInput !== item.id\">{{ item.type }}</div>\r\n                    <input \r\n                        :value=\"item.name\" class=\"blueprint-input-contents-rename\" \r\n                        v-if=\"renameInput === item.id\" \r\n                        @blur=\"(e) => changeName(item.id, e.target.value)\"\r\n                        @keyup.enter=\"(e) => changeName(item.id, e.target.value)\"\r\n                        @keyup.esc=\"renameInput = null\"\r\n                        ref=\"renameInput\"\r\n                    />\r\n                </div>\r\n            </perfect-scrollbar>\r\n        </main>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.blueprint-inputs{\r\n    position: absolute;\r\n    width: 300px;\r\n    height: 380px;\r\n    background-color: #2b2b2b;\r\n    left: 20px;\r\n    top: 20px;\r\n    border: 1px solid #191919;\r\n    -webkit-border-radius: 5px;\r\n    -moz-border-radius: 5px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.blueprint-inputs header {\r\n    color: #FFF;\r\n    padding: 10px;\r\n    background-color: #393939;\r\n    border-bottom: 1px solid #191919;\r\n    -webkit-border-top-left-radius: 5px;\r\n    -webkit-border-top-right-radius: 5px;\r\n    -moz-border-radius-topleft: 5px;\r\n    -moz-border-radius-topright: 5px;\r\n    border-top-left-radius: 5px;\r\n    border-top-right-radius: 5px;\r\n    display: flex;\r\n}\r\n\r\n.blueprint-inputs header span {\r\n    padding-top: 5px;\r\n    padding-left: 5px;\r\n}\r\n\r\n.blueprint-inputs-minimenu{\r\n    display: flex; \r\n    justify-content: flex-end;\r\n    margin-left: auto;\r\n    right: 0px;\r\n    width: 50px;\r\n    height: 100%;\r\n}\r\n\r\n.blueprint-inputs-add{\r\n    padding: 5px 10px;\r\n    -webkit-border-radius: 3px;\r\n    -moz-border-radius: 3px;\r\n    border-radius: 3px;\r\n    border: 1px solid #393939;\r\n    cursor: default;\r\n}\r\n\r\n.blueprint-inputs-add:hover{\r\n    background-color: #676767;\r\n    border: 1px solid #191919;\r\n}\r\n\r\n.blueprint-inputs-contents{\r\n    position: relative;\r\n    width: 100%;\r\n    height: calc(100% - 54px);\r\n    padding: 5px 0 5px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n}\r\n\r\n.blueprint-inputs-item{\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    padding: 5px 10px;\r\n}\r\n\r\n.blueprint-inputs-item-name{\r\n    background-color: #575758;\r\n    padding: 5px 10px;\r\n    border: 1px solid #191919;\r\n    -webkit-border-radius: 25px;\r\n    -moz-border-radius: 25px;\r\n    border-radius: 25px;\r\n    color: #b1b1b1;\r\n    font-size: 12px;\r\n}\r\n\r\n.blueprint-inputs-item-selected {\r\n    outline: 2px solid #327090;\r\n}\r\n\r\n.blueprint-inputs-item-name:hover {\r\n    outline: 3px solid #327090;\r\n}\r\n\r\n.blueprint-inputs-item-type{\r\n    display: flex; \r\n    justify-content: flex-end;\r\n    margin-left: auto;\r\n    color: #757575;\r\n    align-items: center;\r\n    font-size: 12px;\r\n    margin-right: 15px;\r\n}\r\n\r\n.blueprint-input-contents-rename{\r\n    flex: 1;\r\n    padding: 5px;\r\n    background-color: #2b2b2b;\r\n    border: 1px solid #757575;\r\n    color: #757575;\r\n    -webkit-border-radius: 3px;\r\n    -moz-border-radius: 3px;\r\n    border-radius: 3px;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\nimport { uuid } from \"vue3-uuid\";\r\n\r\nimport { \r\n    IBlueprintInputs, \r\n    IBlueprintInput, \r\n    IBlueprintType \r\n} from \"../../interfaces/blueprint/IBlueprintInputs\";\r\n\r\nimport BlueprintContextMenu from \"./BlueprintContextMenu.vue\";\r\n\r\nexport default defineComponent({\r\n    components: { BlueprintContextMenu },\r\n\r\n    emits: {\r\n        \"start-drag\": (item: IBlueprintInput) => true,\r\n        \"change\": () => true,\r\n        \"over\": (id: string) => true,\r\n        \"out\": () => true,\r\n        \"rename\": (id: string, value: string) => true,\r\n        \"select-input\": (input: IBlueprintInput) => true \r\n    },\r\n    \r\n    data(): IBlueprintInputs {\r\n        return {\r\n            itemOver: null,\r\n            selectedItem: null,\r\n            renameInput: null,\r\n            inputTypes: [\r\n                { label: \"Float\", value: \"float\", default: 0 },\r\n                { label: \"Integer\", value: \"int\", default: 0 },\r\n                { label: \"String\", value: \"string\", default: \"\" },\r\n                { label: \"Date\", value: \"date\", default: Date.now() },\r\n                { label: \"Color\", value: \"color\", default: \"#000000\" },\r\n                { label: \"Image\", value: \"image\", default: null }\r\n            ],\r\n            inputs: []\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        addInput(item: IBlueprintType){\r\n            this.inputs.push({\r\n                id: uuid.v4(),\r\n                name: `${item.label} (${this.inputs.length + 1})`,\r\n                type: item.label,\r\n            });\r\n\r\n            this.$emit(\"change\");\r\n        },\r\n\r\n        removeInput(id: string){\r\n            this.inputs = this.inputs.filter((input) => input.id !== id).filter(item => item);\r\n            this.$emit(\"change\");\r\n        },\r\n\r\n        itemMouseOver(id: string){\r\n            this.itemOver = id;\r\n        },\r\n\r\n        itemMouseOut(){\r\n            this.itemOver = null;\r\n        },\r\n\r\n        mouseOver(id: string){\r\n            this.$emit(\"over\", id);\r\n        },\r\n\r\n        mouseOut(){\r\n            this.$emit(\"out\");\r\n        },\r\n\r\n        rename(id: string){\r\n            this.renameInput = id;\r\n            this.$forceUpdate();\r\n\r\n            setTimeout(() => {\r\n                this.$refs.renameInput[0].focus()\r\n            }, 100);           \r\n        },\r\n\r\n        selectInput(id: string){\r\n            this.selectedItem = id;\r\n\r\n            this.inputs.map((input) => {\r\n                if(input.id === id)\r\n                    this.$emit(\"select-input\", input);\r\n            });            \r\n        },\r\n\r\n        changeName(id: string, value: string){\r\n            this.inputs = this.inputs.map((input) => {\r\n                if(input.id === id)\r\n                    input.name = value;\r\n\r\n                return input;\r\n            }).filter(item => item);\r\n\r\n            this.$emit(\"rename\", id, value);\r\n            this.renameInput = null;\r\n        },\r\n\r\n        serialize(){\r\n            return this.inputs;\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div \r\n        class=\"blueprint-connection\" \r\n        :style=\"{ border: `2px solid ${getInputColor()}` }\"\r\n    >\r\n        <div \r\n            class=\"blueprint-connection-inner\" \r\n            :style=\"{ backgroundColor: getInputColor() }\"\r\n        ></div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.blueprint-connection{\r\n    height: 12px;\r\n    width: 12px;\r\n    background-color: #212121;\r\n    border-radius: 50%;\r\n    transition: background-color 0.5s ease;\r\n    margin-left: 10px;\r\n    margin-right: 5px;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.blueprint-connection:hover .blueprint-connection-inner{\r\n    display: block;\r\n}\r\n\r\n.blueprint-connection-inner{\r\n    display: none;\r\n    height: 4px;\r\n    width: 4px;\r\n    border-radius: 50%;\r\n    margin: auto;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue';\r\nimport { IBlueprintComponent } from \"../../interfaces\";\r\n\r\nexport default defineComponent({\r\n    props: {\r\n        content: {\r\n            type: Object as PropType<IBlueprintComponent>,\r\n            required: true,\r\n            default: { }\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        getInputColor(){\r\n            switch(this.content.component.type){\r\n                case \"Float\": return \"#84e4e7\";\r\n                case \"Integer\": return \"#9aef92\";\r\n                case \"String\": return \"#9aef92\";\r\n                case \"Date\": return \"#917fdf\";\r\n                case \"Color\": return \"#edf696\";\r\n                case \"Image\": return \"#ff8b8b\";\r\n                default: return \"#c1c1c1\";\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div\r\n        v-if=\"isBlueprintInput() && content && content.component\"\r\n        :class=\"[(inputSelected === content.component?.id || selectedItem === id) ? 'component-input-selected' : '', 'component-input component']\"\r\n        :style=\"{left: `${content.x}px`, top: `${content.y}px`}\"\r\n    > \r\n        <span>{{ content.component?.name }}</span>\r\n        \r\n        <BlueprintConnection :content=\"content\"></BlueprintConnection>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.component{\r\n    position: absolute;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.component span {\r\n    padding: 5px;\r\n}\r\n\r\n.component-input{\r\n    background-color: #575758;\r\n    padding: 5px 10px;\r\n    border: 1px solid #191919;\r\n    -webkit-border-radius: 25px;\r\n    -moz-border-radius: 25px;\r\n    border-radius: 25px;\r\n    color: #b1b1b1;\r\n    font-size: 12px;\r\n}\r\n\r\n.component-input-selected {\r\n    outline: 2px solid #327090;\r\n}\r\n\r\n.component-input:hover{\r\n    outline: 3px solid #327090;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue';\r\nimport { IBlueprintComponent, BlueprintComponentType } from \"../../interfaces\";\r\nimport BlueprintConnection from \"./BlueprintConnection.vue\";\r\n\r\nexport default defineComponent({\r\n    components: { BlueprintConnection },\r\n\r\n    props: {\r\n        id: {\r\n            type: String,\r\n            require: false,\r\n            default: null\r\n        },\r\n        content: {\r\n            type: Object as PropType<IBlueprintComponent>,\r\n            required: true,\r\n            default: { }\r\n        },\r\n        inputSelected: {\r\n            type: String,\r\n            require: false,\r\n            default: null\r\n        },\r\n        selectedItem: {\r\n            type: String,\r\n            require: false,\r\n            default: null\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        isBlueprintInput(){\r\n            return (this.content.type === BlueprintComponentType.Input);\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"blueprint-inspector\">\r\n        <header>\r\n            <span>Inspector</span>\r\n        </header>\r\n\r\n        <div class=\"blueprint-inspector-inputs\" v-if=\"rootItem\">\r\n            <div>\r\n                <div class=\"blueprint-inspector-input-label\">ID:</div> \r\n                <input class=\"blueprint-inspector-input\" :value=\"rootItem.id\" disabled />\r\n            </div>\r\n\r\n            <div>\r\n                <div class=\"blueprint-inspector-input-label\">Name:</div> \r\n                <input class=\"blueprint-inspector-input\" :value=\"rootItem.name\" />\r\n            </div>\r\n\r\n            <div>\r\n                <div class=\"blueprint-inspector-input-label\">Default:</div> \r\n                <input class=\"blueprint-inspector-input\" :value=\"rootItem.default\" />\r\n            </div>            \r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.blueprint-inspector{\r\n    position: absolute;\r\n    width: 300px;\r\n    height: 380px;\r\n    background-color: #2b2b2b;\r\n    right: 20px;\r\n    top: 20px;\r\n    border: 1px solid #191919;\r\n    -webkit-border-radius: 5px;\r\n    -moz-border-radius: 5px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.blueprint-inspector header {\r\n    color: #FFF;\r\n    padding: 10px;\r\n    background-color: #393939;\r\n    border-bottom: 1px solid #191919;\r\n    -webkit-border-top-left-radius: 5px;\r\n    -webkit-border-top-right-radius: 5px;\r\n    -moz-border-radius-topleft: 5px;\r\n    -moz-border-radius-topright: 5px;\r\n    border-top-left-radius: 5px;\r\n    border-top-right-radius: 5px;\r\n    display: flex;\r\n}\r\n\r\n.blueprint-inspector header span {\r\n    padding-top: 5px;\r\n    padding-left: 5px;\r\n}\r\n\r\n.blueprint-inspector-input{\r\n    flex: 1;\r\n    padding: 5px;\r\n    background-color: #2e2e2e;\r\n    border: 1px solid #212121;\r\n    color: #757575;\r\n    -webkit-border-radius: 3px;\r\n    -moz-border-radius: 3px;\r\n    border-radius: 3px;\r\n}\r\n\r\n.blueprint-inspector-inputs {\r\n    padding: 5px 10px;\r\n}\r\n\r\n.blueprint-inspector-input-label{\r\n    width: 50%;\r\n    align-items: center;\r\n    font-size: 12px;\r\n}\r\n\r\n.blueprint-inspector-inputs div {\r\n    padding: 2px 0px;\r\n    color: #757575;\r\n    display: flex;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue';\r\nimport { IBlueprintComponent } from \"../../interfaces\";\r\n\r\nexport default defineComponent({\r\n    props: {\r\n        rootItem: {\r\n            type: Object as PropType<IBlueprintComponent>,\r\n            require: true\r\n        }\r\n    },\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"modal\" @click.self=\"close\" v-if=\"opened\">\r\n        <slot @click.stop=\"\" @click.prevent=\"\" />\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.modal {\r\n    position: fixed;\r\n    background-color: rgba(0,0,0,0.5);\r\n    top: 0px;\r\n    left: 0px;\r\n    bottom: 0px;\r\n    right: 0px;\r\n    overflow: hidden;\r\n    animation:fadein .5s;\r\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n}\r\n\r\n@keyframes fadein {\r\n\tfrom {\r\n\t\topacity:0;\r\n\t}\r\n\tto {\r\n\t\topacity:1;\r\n\t}\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({    \r\n    data() {\r\n        return {\r\n            opened: true\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        open(){\r\n            this.opened = true;\r\n        },\r\n\r\n        close(){\r\n            this.opened = false;\r\n        }\r\n    }\r\n})\r\n</script>","<template>\r\n    <div>\r\n        <header>\r\n            <button  \r\n                v-for=\"(item, index) in items\" \r\n                :key=\"index\"\r\n                :class=\"[(tabIndex == index) ? 'tabs-item-active' : '', 'tabs-item']\"\r\n                @click.self=\"selectTab(index)\"\r\n            >{{ item }}</button>\r\n        </header>\r\n        <slot :tabIndex=\"tabIndex\"></slot>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.header{\r\n    display: flex;\r\n    justify-content: space-around;\r\n}\r\n\r\n.tabs-item {\r\n    margin-right: 20px;\r\n    padding-top: 10px;\r\n    border-top: 1px solid transparent;\r\n}\r\n\r\n.tabs-item-active {\r\n    font-weight: bold;\r\n    color: #FFF;\r\n    border-top: 1px solid #FFF;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({    \r\n    props: {\r\n        items: {\r\n            type: Array,\r\n            default: []\r\n        }\r\n    },\r\n\r\n    emits: {\r\n        change: (index: number) => true\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            tabIndex: 0,\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        selectTab(index: number) {\r\n            this.tabIndex = index;\r\n            this.$emit(\"change\", index);\r\n        }\r\n    }\r\n})\r\n</script>","<template>\r\n    <div>\r\n        <i :class=\"[icon, 'input-icon']\" v-if=\"icon\"></i>\r\n        \r\n        <input \r\n            v-model=\"value\"\r\n            :type=\"type\" \r\n            :placeholder=\"placeholder\"\r\n            class=\"input-input\"\r\n            @keyup.self=\"changeValue\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.input-icon{\r\n    margin-right: 15px;\r\n}\r\n\r\n.input-input {\r\n    background: transparent;\r\n    width: calc(100% - 30px);\r\n    margin: auto;\r\n    outline: none;\r\n    padding: 2px;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({  \r\n    props: {\r\n        type: {\r\n            type: String,\r\n            default: \"text\"\r\n        },\r\n        icon: {\r\n            type: String,\r\n            default: \"fa-solid fa-search\"\r\n        },\r\n        placeholder: {\r\n            type: String,\r\n            default: \"Search\"\r\n        }\r\n    },\r\n\r\n    emits: {\r\n        \"change\": (value: string | null) => true,\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            value: null,\r\n            modalSettings: {\r\n                width: 700,\r\n                height: 500,\r\n                backgroundColor: \"2B2B2B\"\r\n            }\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        changeValue(){\r\n            this.$emit(\"change\", this.value);\r\n        }\r\n    }\r\n});\r\n</script>","<template>\r\n    <modal :options=\"modalSettings\" ref=\"window\">\r\n        <div class=\"blueprint-nodes-navbar\">\r\n            <header>\r\n                <tabs \r\n                    :items=\"tabsItems\" \r\n                    class=\"blueprint-nodes-navbar-tabs\"\r\n                    @change=\"selectTab\"\r\n                ></tabs>\r\n\r\n                <custom-input \r\n                    type=\"text\" \r\n                    class=\"blueprint-nodes-navbar-search\" \r\n                    @change=\"search\"\r\n                />\r\n\r\n                <button \r\n                    class=\"blueprint-nodes-navbar-close\" \r\n                    @click=\"close\"\r\n                >\r\n                    <i class=\"fa-solid fa-xmark\"></i>\r\n                </button>\r\n            </header>\r\n\r\n            <main>\r\n                <div v-if=\"tabIndex==0\" class=\"blueprint-nodes-navbar-blueprints\">\r\n                    <perfect-scrollbar>\r\n                        <div \r\n                            v-for=\"(group, index) in dataStore.blueprintGroups\" \r\n                            :key=\"index\"\r\n                            class=\"blueprint-nodes-navbar-blueprints-group\"\r\n                        >\r\n                            <div \r\n                                class=\"blueprint-nodes-navbar-blueprints-group-item\"\r\n                                @click=\"toggleItem(index.toString())\"\r\n                            >\r\n                                <span class=\"font-bold\">{{ index }}</span>\r\n\r\n                                <button class=\"mt-1\">\r\n                                    <i \r\n                                        class=\"fa-solid fa-chevron-up\" \r\n                                        v-if=\"blueprintGroupsOpened.hasOwnProperty(index) && \r\n                                        blueprintGroupsOpened[index] === true\"\r\n                                    ></i>\r\n                                    <i \r\n                                        class=\"fa-solid fa-chevron-down\" \r\n                                        v-if=\"!blueprintGroupsOpened.hasOwnProperty(index) || \r\n                                        blueprintGroupsOpened[index] === false\"\r\n                                    ></i>\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div \r\n                                class=\"blueprint-nodes-navbar-blueprints-items\" \r\n                                v-if=\"blueprintGroupsOpened.hasOwnProperty(index) && \r\n                                blueprintGroupsOpened[index] === true\"\r\n                            >\r\n                                <div \r\n                                    class=\"blueprint-nodes-navbar-blueprints-items-item\"\r\n                                    :style=\"{backgroundColor: (item[1].currentColor) ? \r\n                                        item[1].currentColor : \r\n                                        item[1].editorHeaderColor}\"\r\n                                    v-for=\"(item, index) in group\" \r\n                                    :key=\"index\"\r\n                                    @mouseover=\"item[1].currentColor = darkenColor(item[1].editorHeaderColor, 20)\"\r\n                                    @mouseout=\"item[1].currentColor = item[1].editorHeaderColor\"\r\n                                    @click=\"createBlueprint(item[1])\"\r\n                                >\r\n                                    <img \r\n                                        v-if=\"item[1].icon && item[1].icon.includes('/')\"\r\n                                        :src=\"item[1].icon\" \r\n                                        class=\"blueprint-nodes-navbar-blueprints-items-icon\" \r\n                                    />\r\n\r\n                                    <i \r\n                                        v-if=\"item[1].icon && !item[1].icon.includes('/')\"\r\n                                        :class=\"[item[1].icon, 'blueprint-nodes-navbar-blueprints-items-icon']\" \r\n                                        style=\"margin-top: 5px\"\r\n                                    ></i>\r\n\r\n                                    {{ item[1].displayName ? item[1].displayName : item[1].namespace }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </perfect-scrollbar>\r\n                </div>\r\n                <div v-if=\"tabIndex==1\">1</div>\r\n                <div v-if=\"tabIndex==2\">2</div>\r\n                <div v-if=\"tabIndex==3\">3</div>\r\n            </main>\r\n        </div>\r\n    </modal>\r\n</template>\r\n\r\n<style scoped>\r\n.blueprint-nodes-navbar {\r\n    position: fixed;\r\n    width: 800px;\r\n    height: 600px;\r\n    background-color: #292828;\r\n    border: 1px solid #191919;\r\n    top: 50%;\r\n    left: 50%;\r\n    margin-left: -400px;\r\n    margin-top: -300px;\r\n}\r\n\r\n.blueprint-nodes-navbar header {\r\n    border-bottom: 1px solid #191919;\r\n}\r\n\r\n.blueprint-nodes-navbar main {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.blueprint-nodes-navbar-tabs{\r\n    margin-left: 15px;\r\n    margin-right: 15px;\r\n    color: #eaeaea;\r\n}\r\n\r\n.blueprint-nodes-navbar-search {\r\n    background-color: #191919;\r\n    width: calc(100% - 30px);\r\n    margin: 15px;\r\n    padding: 15px;\r\n    color: #eaeaea;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints {\r\n    width: 300px;\r\n    height: calc(100% - 118px);\r\n    border-right: 1px solid #191919;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints-group {\r\n    width: 100%;\r\n    border-bottom: 1px solid #191919;\r\n    border-left: 5px solid #EFEFEF;\r\n    color: #eaeaea;\r\n    cursor: pointer;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints-group button {\r\n    display: flex; \r\n    justify-content: flex-end;\r\n    margin-left: auto;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints-group-item:hover {\r\n    background-color: #393939;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints-group-item {\r\n    padding: 5px 10px;\r\n    display: flex;\r\n    flex: 1;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints-items {\r\n    flex: 1;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints-items-icon {\r\n    width: 20px;\r\n    height: 20px;\r\n    margin-right: 10px;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints-items-item {\r\n    background-color: #393939;\r\n    padding: 5px 10px;\r\n    margin: 10px 5px;\r\n    display: flex;\r\n    transition: background-color 0.3s ease;\r\n    color: #eaeaea;\r\n}\r\n\r\n.blueprint-nodes-navbar-blueprints-items-item:hover{\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.blueprint-nodes-navbar-close{\r\n    position: absolute;\r\n    padding: 5px 10px;\r\n    -webkit-border-radius: 3px;\r\n    -moz-border-radius: 3px;\r\n    border-radius: 3px;\r\n    border: 1px solid #292828;\r\n    cursor: default;\r\n    color: #eaeaea;\r\n    top: 5px;\r\n    right: 5px;\r\n}\r\n\r\n.blueprint-nodes-navbar-close:hover{\r\n    background-color: #676767;\r\n    border: 1px solid #191919;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Emit, Ref, Setup } from 'vue-facing-decorator';\r\nimport { dataStorage } from '@stores/dataStore';\r\nimport { WS } from \"@mixins/ws\";\r\nimport { uuid } from \"vue3-uuid\";\r\n\r\nimport Modal from \"@/components/windows/Modal.vue\";\r\nimport Tabs from \"@/components/navigation/Tabs.vue\";\r\nimport CustomInput from \"@/components/form/Input.vue\";\r\n\r\n@Component({\r\n    components: { Modal, Tabs, CustomInput }\r\n})\r\nexport default class BlueprintNodesNavbar extends WS {\r\n\r\n    @Setup(() => dataStorage())\r\n    dataStore;\r\n\r\n    id = uuid.v4();\r\n\r\n    tabsItems = [\"Blueprints\", \"Prefabs\", \"Plugins\", \"Import\"];\r\n\r\n    blueprintGroupsOpened= {};\r\n\r\n    tabIndex= 0;\r\n\r\n    searchText: string = \"\";\r\n\r\n    @Ref\r\n    readonly window!: typeof Modal;\r\n\r\n    modalSettings = {\r\n        width: 700,\r\n        height: 500,\r\n        backgroundColor: \"2B2B2B\"\r\n    }\r\n\r\n    public open(){\r\n        this.window.open();\r\n    }\r\n\r\n    public close(){\r\n        this.window.close();\r\n    }\r\n\r\n    public selectTab(index: number){\r\n        this.tabIndex = index;\r\n    }\r\n\r\n    public search(value: string){\r\n        this.searchText = value;\r\n    }\r\n\r\n    darkenColor(color: string, percent: number): string{\r\n        if(color){\r\n            let num = parseInt(color.replace(\"#\",\"\"), 16),\r\n            amt = Math.round(2.55 * percent),\r\n            R = (num >> 16) - amt,\r\n            B = (num >> 8 & 0x00FF) - amt,\r\n            G = (num & 0x0000FF) - amt;\r\n            return \"#\" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);\r\n        }\r\n        else{\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    toggleItem(index: string): void {\r\n        if(this.blueprintGroupsOpened[index])\r\n            this.blueprintGroupsOpened[index] = !this.blueprintGroupsOpened[index];\r\n        else\r\n            this.blueprintGroupsOpened[index] = true;\r\n    }\r\n\r\n    @Emit\r\n    createBlueprint(blueprint){\r\n        this.$emit(\"create-blueprint\", blueprint);\r\n    }\r\n}\r\n</script>","<template>\r\n    <div class=\"blueprint-editor\">\r\n        <blueprint-navbar></blueprint-navbar>\r\n\r\n        <perfect-scrollbar>        \r\n            <div \r\n                class=\"grid-contents block shadow-black shadow-inner\" \r\n                style=\"width: 5000px; height: 5000px\" \r\n                ref=\"contents\"  \r\n                @contextmenu=\"openNodeNavbar\"\r\n                @click=\"deselectIfClickedOutside\"\r\n                @drop=\"dropHandler\" \r\n                @dragover.prevent\r\n            >\r\n                <blueprint-inputs \r\n                    @change=\"saveLocal\"\r\n                    @start-drag=\"createGhostDrag\" \r\n                    @select-input=\"selectInput\"\r\n                    @over=\"inputMouseOver\"\r\n                    @out=\"inputMouseOut\"\r\n                    @rename=\"renameComponent\"\r\n                    @click.stop\r\n                    ref=\"inputs\"\r\n                ></blueprint-inputs>\r\n\r\n                <blueprint-inspector v-if=\"rootItem\" :rootItem=\"rootItem\" @click.stop></blueprint-inspector>\r\n\r\n                <drag-handle \r\n                    @dragged=\"({ deltaX, deltaY }) => updatePosition(item[0], deltaX, deltaY)\" \r\n                    @click.stop\r\n                    v-for=\"(item, key) in items\" :key=\"key\" \r\n                >\r\n                    <blueprint-component   \r\n                        :id=\"item[0]\"                      \r\n                        :content=\"item[1]\" \r\n                        :inputSelected=\"inputSelected\"\r\n                        :selectedItem=\"selectedItem\"\r\n                        @click=\"selectItem(item[0], item[1].component)\"                        \r\n                        @mouseover=\"mouseOverComponent(item[1].component.id)\"\r\n                        @mouseleave=\"mouseLeaveComponent\"    \r\n                        ref=\"components\"                    \r\n                    ></blueprint-component>\r\n                </drag-handle>\r\n\r\n                <blueprint-nodes-navbar \r\n                    ref=\"nodesNavbar\"\r\n                    @create-blueprint=\"createBlueprint\"\r\n                ></blueprint-nodes-navbar>\r\n            </div>\r\n        </perfect-scrollbar>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.blueprint-editor{\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #232323;\r\n    background-image:linear-gradient(#232323, #282828);\r\n    position: relative;\r\n}\r\n\r\n.grid-contents{\r\n    display: block;\r\n    overflow: hidden;\r\n    touch-action: none;\r\n    outline: 0;\r\n    background-color: transparent;\r\n    background-image: linear-gradient(0deg, transparent 24%, rgba(255, 255, 255, .05) 25%, rgba(255, 255, 255, .05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, .05) 75%, rgba(255, 255, 255, .05) 76%, transparent 77%, transparent), linear-gradient(90deg, transparent 24%, rgba(255, 255, 255, .05) 25%, rgba(255, 255, 255, .05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, .05) 75%, rgba(255, 255, 255, .05) 76%, transparent 77%, transparent);\r\n    height: 100%;\r\n    background-size:50px 50px;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Ref } from 'vue-facing-decorator';\r\nimport { dataStorage } from '@stores/dataStore';\r\nimport { Subscribe } from '@decorators';\r\nimport { WS } from \"@mixins/ws\";\r\nimport { uuid } from \"vue3-uuid\";\r\n\r\nimport { \r\n    IBlueprintInput,  \r\n    IBlueprintComponent,\r\n    BlueprintComponentType\r\n} from \"../../interfaces\";\r\n\r\nimport DragHandle from \"../drag/DragHandle.vue\";\r\nimport BlueprintNavbar from \"./BlueprintNavbar.vue\";\r\nimport BlueprintInputs from \"./BlueprintInputs.vue\";\r\nimport BlueprintComponent from \"./BlueprintComponent.vue\";\r\nimport BlueprintInspector from \"./BlueprintInspector.vue\";\r\nimport BlueprintNodesNavbar from \"./BlueprintNodesNavbar.vue\";\r\n\r\n@Component({\r\n    components: { \r\n        DragHandle,\r\n        BlueprintNavbar,\r\n        BlueprintInputs, \r\n        BlueprintComponent,\r\n        BlueprintInspector,\r\n        BlueprintNodesNavbar \r\n    }\r\n})\r\nexport default class BlueprintEditor extends WS {\r\n    id = uuid.v4();\r\n\r\n    props = {\r\n        id: {\r\n            type: String,\r\n            require: true\r\n        }\r\n    };\r\n\r\n    dragItem: IBlueprintInput | undefined | null = undefined;\r\n\r\n    inputSelected: string | undefined | null = undefined;\r\n\r\n    selectedItem: string | undefined = undefined;\r\n    \r\n    rootItem: IBlueprintComponent | IBlueprintInput | undefined = undefined;\r\n\r\n    lastMousePosition = { x: 0, y: 0 };\r\n\r\n    items= new Map<string, IBlueprintComponent>();\r\n\r\n    @Ref\r\n    readonly contents!: HTMLDivElement;\r\n\r\n    @Ref\r\n    readonly inputs!: typeof BlueprintInputs;\r\n\r\n    @Ref\r\n    readonly nodesNavbar!: typeof BlueprintNodesNavbar;\r\n\r\n    async mounted(){\r\n        await this.deserialize();\r\n    }\r\n\r\n    @Subscribe(\"auth.Success\")\r\n    loadDependeces(){\r\n        WS.send(WS.pack(\"blueprint\", \"Request\"));\r\n    }\r\n\r\n    @Subscribe(\"blueprint.BlueprintList\")\r\n    async receiveBlueprints(data: any){\r\n        let blueprintGroups = {};\r\n\r\n        dataStorage().save(\"blueprints\", data?.blueprints);\r\n\r\n        for(let blueprint of data?.blueprints){\r\n            if(!blueprintGroups[blueprint.group])\r\n                blueprintGroups[blueprint.group] = new Map();\r\n\r\n            if(!blueprintGroups[blueprint.group].has(blueprint.namespace))\r\n                blueprintGroups[blueprint.group].set(blueprint.namespace, blueprint);\r\n        }\r\n\r\n        const sortedGroups = Object.keys(blueprintGroups).sort().reduce(\r\n            (obj, key) => { \r\n                obj[key] = blueprintGroups[key]; \r\n                return obj;\r\n            }, \r\n            {}\r\n        );\r\n\r\n        dataStorage().save(\"blueprintGroups\", sortedGroups);\r\n    }\r\n\r\n    createGhostDrag(item: IBlueprintInput){\r\n        this.dragItem = item;\r\n    }\r\n\r\n    dropHandler(event){\r\n        if(this.dragItem){\r\n            const rootRect = this.contents.getBoundingClientRect();\r\n            const x = event.clientX - rootRect.left;\r\n            const y = event.clientY - rootRect.top;\r\n            this.createComponentInput(x, y, this.dragItem);\r\n        }            \r\n    }\r\n\r\n    createComponentInput(x: number, y: number, item: IBlueprintInput){\r\n        const id = uuid.v4();\r\n        this.items.set(id, { id, x, y, component: item, type: BlueprintComponentType.Input });\r\n        this.dragItem = null;\r\n        this.saveLocal();\r\n    }\r\n\r\n    hiddenPreview(event){\r\n        event.dataTransfer.setDragImage(new Image(), 0, 0);\r\n    }\r\n\r\n    mouseOverComponent(itemId: string){\r\n        this.inputs.itemMouseOver(itemId);\r\n    }\r\n\r\n    mouseLeaveComponent(){\r\n        this.inputs.itemMouseOut();\r\n    }\r\n\r\n    inputMouseOver(id: string){\r\n        this.inputSelected = id;\r\n    }\r\n\r\n    inputMouseOut(){\r\n        this.inputSelected = null;\r\n    }\r\n\r\n    updatePosition(componentId, x, y){\r\n        let item = this.items.get(componentId);\r\n\r\n        if(item){\r\n            item.x = item.x - x;\r\n            item.y = item.y - y;\r\n\r\n            this.items.set(componentId, item);\r\n            this.saveLocal();\r\n        }\r\n    }\r\n\r\n    selectItem(componentId: string, rootId: IBlueprintComponent | IBlueprintInput | undefined){\r\n        this.selectedItem = componentId;\r\n        this.rootItem = rootId;\r\n    }\r\n\r\n    selectInput(input: IBlueprintInput){\r\n        this.rootItem = input;\r\n    }\r\n\r\n    renameComponent(componentId: string, name: string){\r\n        let items = new Map<string, IBlueprintComponent>();\r\n\r\n        this.items.forEach((value: IBlueprintComponent, key: string) => {\r\n            if(value.component.id === componentId)\r\n                value.component.name = name;\r\n\r\n            items.set(key, value);\r\n        });\r\n\r\n        this.items = items;\r\n        this.saveLocal();\r\n    }\r\n\r\n    deselectIfClickedOutside(event) {\r\n        if (this.selectedItem){\r\n            this.selectedItem = undefined;\r\n            this.rootItem = undefined;\r\n        }                \r\n    }\r\n\r\n    openNodeNavbar(event){\r\n        const rootRect = this.contents.getBoundingClientRect();\r\n        const x = event.clientX - rootRect.left;\r\n        const y = event.clientY - rootRect.top;\r\n\r\n        this.lastMousePosition = { x, y };\r\n        this.nodesNavbar.open();\r\n        event.preventDefault();\r\n    }\r\n\r\n    createBlueprint(blueprint){\r\n        console.log(blueprint);\r\n    }\r\n\r\n    saveLocal(){\r\n        localStorage.setItem(`editor-${this.id}`, JSON.stringify(this.serialize()));\r\n    }\r\n\r\n    deserialize(){\r\n        let storageData = localStorage.getItem(`editor-${this.id}`);\r\n\r\n        if(storageData){\r\n            let settings = JSON.parse(storageData);\r\n            this.inputs.inputs = settings.inputs;\r\n\r\n            settings.items.forEach(obj => {\r\n                this.items.set(obj[0], obj[1]);\r\n            });\r\n        }            \r\n    }\r\n\r\n    serialize(){\r\n        return {\r\n            inputs: this.inputs.serialize(),\r\n            items: Array.from(this.items)\r\n        }\r\n    }\r\n}\r\n</script>\r\n","<template>\r\n    <div class=\"layout-box\">\r\n        <LayoutPanel \r\n            v-for=\"(value, key) in contents\" \r\n            :key=\"key\" \r\n            :content=\"value\" \r\n            class=\"layout-panel\"\r\n            @mousemove=\"removeEmptyPanels\"\r\n        >\r\n            <slot/>\r\n        </LayoutPanel>\r\n\r\n        <LayoutDragPreview @addItemRoot=\"addItemRoot\" @change=\"removeEmptyPanels\" @drop=\"drop\"></LayoutDragPreview>\r\n\r\n        <div class=\"layout-drop-areas\" v-if=\"storage.inDrag\">\r\n            <div class=\"layout-drop-area-left layout-drop-area\" direction=\"left\"></div>\r\n            <div class=\"layout-drop-area-right layout-drop-area\" direction=\"right\"></div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.layout-box {\r\n    overflow: hidden;\r\n    background-color: rgb(67, 67, 67);\r\n    display: flex; \r\n    flex-direction: row; \r\n    height: 100vh;\r\n}\r\n\r\n.layout-panel {\r\n    flex: 1;\r\n}\r\n\r\n.layout-drop-area-left {\r\n    position: fixed;\r\n    min-width: 100px;\r\n    height: 100%;\r\n    z-index: 999;\r\n    top: 0px;\r\n    left: 0px;\r\n}\r\n\r\n.layout-drop-area-right {\r\n    position: fixed;\r\n    min-width: 100px;\r\n    height: 100%;\r\n    z-index: 999;\r\n    top: 0px;\r\n    right: 0px;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\nimport { uuid } from \"vue3-uuid\";\r\n\r\nimport { componentIndexStorage } from \"../../stores/componentIndex\";\r\nimport { dragStorage } from \"../../stores/dragStorage\";\r\nimport { ILayoutItem, ILayout, ILayoutPanel } from \"../../interfaces\";\r\nimport LayoutPanel from \"./LayoutPanel.vue\";\r\nimport LayoutDragPreview from \"./LayoutDragPreview.vue\";\r\n\r\nimport BlueprintEditor from \"../blueprint/BlueprintEditor.vue\";\r\n\r\nexport default defineComponent({\r\n    components: { \r\n        LayoutPanel,\r\n        LayoutDragPreview\r\n    },\r\n\r\n    setup(props, context){\r\n        const componentIndex = componentIndexStorage();\r\n        const storage = dragStorage();\r\n        componentIndex.setLayout({ props, context });\r\n        return { storage };\r\n    },\r\n\r\n    data(): ILayout {\r\n        return {            \r\n            index: new Map<string, ILayoutItem>(),\r\n            previewDragPainel: null,\r\n            dropAreaSelected: null,\r\n            contents: [\r\n                {\r\n                    id: uuid.v4(),                        \r\n                    rows: [{\r\n                        currentItemSelected: 0,\r\n                        items: [\r\n                            { \r\n                                id: \"content-1\", \r\n                                namespace: \"item 1\", \r\n                                icon: \"fa-solid fa-file\", \r\n                                items: [],\r\n                                content: BlueprintEditor\r\n                            }\r\n                        ]\r\n                    }]                        \r\n                }\r\n            ] \r\n        }\r\n    },\r\n\r\n    methods: {\r\n        addItemRoot(item: ILayoutItem, unshift: boolean) {\r\n            if(this.previewDragPainel === null){\r\n                this.previewDragPainel = item.id;\r\n\r\n                if(this.storage.currentPanel && this.storage.currentPanel.rows && this.storage.position){\r\n                    this.storage.currentPanel.rows[this.storage.position.row].items = this.storage.currentPanel.rows[this.storage.position.row].\r\n                        items.filter((value, key) => (value as ILayoutItem).id !== item.id); \r\n                }\r\n\r\n                let newPanel : ILayoutPanel =  {\r\n                    id: uuid.v4(),\r\n                    rows: [ { items: [ item ], currentItemSelected: 0 } ]\r\n                };\r\n\r\n                if(this.contents){\r\n                    if(unshift)\r\n                    this.contents.unshift(newPanel);\r\n                else \r\n                    this.contents.push(newPanel);\r\n                }\r\n                \r\n                this.removeEmptyPanels();\r\n            }\r\n        },\r\n\r\n        drop(){\r\n            this.previewDragPainel = null;\r\n        },\r\n\r\n        removeEmptyPanels(){\r\n            if(this.storage.inDrag){\r\n                this.contents = (this.contents) ? this.contents?.filter((item) => item.rows.length > 0) : null; \r\n                this.reIndex();\r\n            }               \r\n        },\r\n\r\n        reIndex(){\r\n            for(let itemKey in this.index){\r\n                if(this.contents?.filter((item) => item.id === itemKey).length === 0){\r\n                    this.index.delete(itemKey);\r\n                }\r\n            }                \r\n        }\r\n    }\r\n});\r\n</script>\r\n"],"names":[],"sourceRoot":""}